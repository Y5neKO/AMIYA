package com.y5neko.amiya.controller;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.y5neko.amiya.dto.response.ApiResponse;
import com.y5neko.amiya.dto.response.PageResponse;
import com.y5neko.amiya.entity.Asset;
import com.y5neko.amiya.entity.Vulnerability;
import com.y5neko.amiya.exception.BizException;
import com.y5neko.amiya.security.util.JwtUtils;
import com.y5neko.amiya.service.AssetService;
import com.y5neko.amiya.service.UserService;
import com.y5neko.amiya.service.VulnerabilityService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/vulnerability")
@Tag(name = "漏洞管理")
public class VulnerabilityController {

    private final VulnerabilityService vulnerabilityService;
    private final AssetService assetService;
    private final UserService userService;

    public VulnerabilityController(VulnerabilityService vulnerabilityService,
                                   AssetService assetService,
                                   UserService userService) {
        this.vulnerabilityService = vulnerabilityService;
        this.assetService = assetService;
        this.userService = userService;
    }

    private JwtUtils.UserRole getCurrentUser(HttpServletRequest request) {
        String token = request.getHeader("Authorization");
        if (token == null || !token.startsWith("Bearer ")) {
            throw new BizException("未提供JWT");
        }
        token = token.substring(7);
        return JwtUtils.parseUserRole(token);
    }

    @GetMapping("/{id}")
    @Operation(summary = "获取漏洞详情")
    public ApiResponse<Vulnerability> getById(@PathVariable Long id, HttpServletRequest request) {
        Vulnerability vuln = vulnerabilityService.getById(id);
        if (vuln == null) throw new BizException("漏洞不存在");

        Asset asset = assetService.getById(vuln.getAssetId());
        if (asset == null) throw new BizException("关联资产不存在");

        JwtUtils.UserRole userRole = getCurrentUser(request);
        Long currentUserId = userService.getByUsername(userRole.getUsername()).getId();

        if (!userRole.isAdmin() && !asset.getOwnerId().equals(currentUserId)) {
            throw new BizException("没有权限查看该漏洞");
        }

        return ApiResponse.ok(vuln);
    }

    @GetMapping("/list")
    @Operation(summary = "获取漏洞列表（分页）")
    public ApiResponse<PageResponse<Vulnerability>> list(
            @RequestParam(defaultValue = "1") long page,
            @RequestParam(defaultValue = "10") long size,
            @RequestParam(required = false) String keyword,
            HttpServletRequest request
    ) {
        JwtUtils.UserRole userRole = getCurrentUser(request);
        Long currentUserId = null;
        if (!userRole.isAdmin()) {
            currentUserId = userService.getByUsername(userRole.getUsername()).getId();
        }

        Page<Vulnerability> pageData = vulnerabilityService.getPage(page, size, keyword, currentUserId);

        PageResponse<Vulnerability> resp = new PageResponse<>(
                pageData.getCurrent(),
                pageData.getSize(),
                pageData.getTotal(),
                pageData.getRecords()
        );
        return ApiResponse.ok(resp);
    }

    @GetMapping("/by-asset/{assetId}")
    @Operation(summary = "根据资产ID查询漏洞")
    public ApiResponse<List<Vulnerability>> getByAssetId(@PathVariable Long assetId, HttpServletRequest request) {
        JwtUtils.UserRole userRole = getCurrentUser(request);
        Long currentUserId = userService.getByUsername(userRole.getUsername()).getId();

        Asset asset = assetService.getById(assetId);
        if (asset == null) throw new BizException("资产不存在");

        if (!userRole.isAdmin() && !asset.getOwnerId().equals(currentUserId)) {
            throw new BizException("没有权限查看该资产的漏洞");
        }

        return ApiResponse.ok(vulnerabilityService.getByAssetId(assetId));
    }

    @GetMapping("/by-task/{taskId}")
    @Operation(summary = "根据任务ID查询漏洞")
    public ApiResponse<List<Vulnerability>> getByTaskId(@PathVariable Long taskId, HttpServletRequest request) {
        JwtUtils.UserRole userRole = getCurrentUser(request);
        Long currentUserId = userService.getByUsername(userRole.getUsername()).getId();

        // 校验 task -> asset -> ownerId
        List<Vulnerability> vulns = vulnerabilityService.getByTaskId(taskId, currentUserId, userRole.isAdmin());
        return ApiResponse.ok(vulns);
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "删除漏洞")
    public ApiResponse<Void> delete(@PathVariable Long id, HttpServletRequest request) {
        Vulnerability vuln = vulnerabilityService.getById(id);
        if (vuln == null) throw new BizException("漏洞不存在");

        Asset asset = assetService.getById(vuln.getAssetId());
        if (asset == null) throw new BizException("关联资产不存在");

        JwtUtils.UserRole userRole = getCurrentUser(request);
        Long currentUserId = userService.getByUsername(userRole.getUsername()).getId();

        if (!userRole.isAdmin() && !asset.getOwnerId().equals(currentUserId)) {
            throw new BizException("没有权限删除该漏洞");
        }

        vulnerabilityService.delete(id);
        return ApiResponse.ok(null);
    }
}
