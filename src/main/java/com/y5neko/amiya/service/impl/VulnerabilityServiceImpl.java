package com.y5neko.amiya.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.y5neko.amiya.entity.Asset;
import com.y5neko.amiya.entity.Task;
import com.y5neko.amiya.entity.Vulnerability;
import com.y5neko.amiya.mapper.VulnerabilityMapper;
import com.y5neko.amiya.service.AssetService;
import com.y5neko.amiya.service.TaskService;
import com.y5neko.amiya.service.VulnerabilityService;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class VulnerabilityServiceImpl implements VulnerabilityService {

    private final VulnerabilityMapper vulnerabilityMapper;
    private final AssetService assetService;
    private final TaskService taskService;

    public VulnerabilityServiceImpl(VulnerabilityMapper vulnerabilityMapper,
                                    AssetService assetService,
                                    TaskService taskService) {
        this.vulnerabilityMapper = vulnerabilityMapper;
        this.assetService = assetService;
        this.taskService = taskService;
    }

    @Override
    public Vulnerability getById(Long id) {
        return vulnerabilityMapper.selectById(id);
    }

    @Override
    public void delete(Long id) {
        vulnerabilityMapper.deleteById(id);
    }

    @Override
    public Page<Vulnerability> getPage(long page, long size, String keyword, Long userId) {
        QueryWrapper<Vulnerability> wrapper = new QueryWrapper<>();

        if (keyword != null && !keyword.trim().isEmpty()) {
            wrapper.like("vuln_name", keyword).or().like("cve_id", keyword);
        }

        // 普通用户 → 只能看自己资产的漏洞
        if (userId != null) {
            List<Asset> userAssets = assetService.getPage(1, Integer.MAX_VALUE, null, userId).getRecords();
            if (userAssets.isEmpty()) {
                return new Page<>(page, size); // 没有资产
            }
            wrapper.in("asset_id", userAssets.stream().map(Asset::getId).toList());
        }

        return vulnerabilityMapper.selectPage(new Page<>(page, size), wrapper);
    }

    @Override
    public List<Vulnerability> getByAssetId(Long assetId) {
        return vulnerabilityMapper.selectList(new QueryWrapper<Vulnerability>().eq("asset_id", assetId));
    }

    @Override
    public List<Vulnerability> getByTaskId(Long taskId, Long userId, boolean isAdmin) {
        QueryWrapper<Vulnerability> wrapper = new QueryWrapper<>();
        wrapper.eq("task_id", taskId);

        if (!isAdmin) {
            Task task = taskService.getById(taskId);
            if (task == null) return List.of();
            Asset asset = assetService.getById(task.getAssetId());
            if (asset == null || !asset.getOwnerId().equals(userId)) { // ✅ 用 ownerId
                return List.of(); // 非本人
            }
        }
        return vulnerabilityMapper.selectList(wrapper);
    }
}
